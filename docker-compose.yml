services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: grid-postgres
    environment:
      POSTGRES_DB: grid_monitoring
      POSTGRES_USER: grid_user
      POSTGRES_PASSWORD: grid_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - grid-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grid_user -d grid_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: grid-neo4j
    environment:
      NEO4J_AUTH: neo4j/grid_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_memory_heap_max__size: 1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./database/neo4j/import:/import
    networks:
      - grid-network
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    container_name: grid-redis
    command: redis-server --requirepass grid_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - grid-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (development)
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/development/backend.Dockerfile
    container_name: grid-backend
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://grid_user:grid_password@postgres:5432/grid_monitoring
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: grid_password
      REDIS_URL: redis://:grid_redis_password@redis:6379
      JWT_SECRET: your-development-jwt-secret
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grid-network
    command: npm run dev

  # Frontend (development)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/development/frontend.Dockerfile
    container_name: grid-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    depends_on:
      - backend
    networks:
      - grid-network
    command: npm run dev

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  redis_data:

networks:
  grid-network:
    driver: bridge